name: build-publish-scan-docker
on:
  push:
    branches:
      - main
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write
  contents: read
jobs:
  build-publish-docker: # Job name is updated
    runs-on: ubuntu-latest
    env:
      # --- UPDATED ENVIRONMENT VARIABLES ---
      DOCKER_REPO: 'manojk-oci-local'
      IMAGE_NAME: 'my-very-cool-image:${{ github.run_number }}'
      JF_URL: https://hts2.jfrog.io
    steps:
      # 1. Setup JFrog CLI and authenticate via OIDC
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: https://hts2.jfrog.io
          JF_PROJECT: ${{ vars.JF_PROJECT }}
        with:
          oidc-provider-name: manojk-oci

      # 2. Verify OIDC Outputs (Optional debug step)
      - name: Verify OIDC Outputs
        run: |
          echo "OIDC User: ${{ steps.setup-cli.outputs.oidc-user }}"
          echo "OIDC Token available: ${{ steps.setup-cli.outputs.oidc-token != '' }}"

      # 3. Checkout the repository code
      - name: Checkout the repository
        uses: actions/checkout@v4

      # --- DOCKER BUILD & PUSH STEPS ---

      # 4. Set up QEMU (for multi-platform builds, kept for robustness)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 5. Authenticate Docker with OIDC Token
      - name: Authenticate Docker to JFrog Registry
        uses: docker/login-action@v3
        with:
          # FIX: Use the DOCKER_REPO environment variable as the registry
          # This assumes Artifactory is configured for repository-path or sub-domain access
          registry: ${{ env.DOCKER_REPO }} 
          username: ${{ steps.setup-cli.outputs.oidc-user }}
          password: ${{ steps.setup-cli.outputs.oidc-token }}

      # 6. Setup Buildx Instance
      - name: Setup Buildx instance
        uses: docker/setup-buildx-action@v3
        with:
          use: true
          platforms: linux/amd64,linux/arm64
          install: true

      # 7. (REMOVED FAILING OCI BUILD STEP) - Implicitly removed

      # 8. Build and Push Docker Image (This step uses the correct action)
      - name: Build and Push Docker Image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}
          # The outputs.digest will be used to reference the image in the next step

      # --- JFROG XRAY SCAN & BUILD PUBLISH ---

      # 9. Scan Docker Image
      - name: Scan Docker Image
        run: |
          # Use the full image path for the scan
          jf docker scan ${{ env.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}

      # 10. Add Docker Image to Build Info
      - name: Add Docker Image to Build Info
        run: |
          # Get the full image reference including the digest from the build-push-action output
          FULL_IMAGE_REF="${{ env.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}@${{ steps.docker_build.outputs.digest }}"

          echo "Adding Docker image to Build Info: $FULL_IMAGE_REF"

          # Alternative way to run build-docker-create using the known outputs:
          jf rt build-docker-create ${{ env.DOCKER_REPO }} --image-digest ${{ steps.docker_build.outputs.digest }} \
            --image-name ${{ env.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }} \
            --module=docker-module

      # 11. Publish Build Info
      - name: Publish Build Info
        run: |
          jf rt build-collect-env
          jf rt build-add-git
          # Use environment variables for the build name/number
          jf rt build-publish ${{ github.repository }}/${{ github.run_id }} ${{ github.run_number }}

      # 12. Xray Build Scan
      - name: Xray Build Scan
        run: |
          jf build-scan ${{ github.repository }}/${{ github.run_id }}/${{ github.run_number }}

      # 13. Write to workflow job summary (Kept your custom notes)
      - name: Write to workflow job summary
        run: |
          NOTE=$'>[!NOTE]\n>Frog Notes \n'
          TIP=$'>[!TIP]\n>Hello JFrog\n'
          IMPORTANT=$'>[!IMPORTANT]\n>Hello IMPORTANT NOTE\n'
          WARNING=$'>[!WARNING]\n>Hello WARNING NOTE\n'
          CAUTION=$'>[!CAUTION]\n>Hello CAUTION NOTE\n'
          echo "$NOTE" >> $GITHUB_STEP_SUMMARY
          echo "$TIP" >> $GITHUB_STEP_SUMMARY
          echo "$IMPORTANT" >> $GITHUB_STEP_SUMMARY
          echo "$WARNING" >> $GITHUB_STEP_SUMMARY
          echo "$CAUTION" >> $GITHUB_STEP_SUMMARY
