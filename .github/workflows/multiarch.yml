name: build-publish-scan
on:
  push:
    branches:
      - main
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write
  contents: read
jobs:
  build-publish-docker: # Job name is updated
    runs-on: ubuntu-latest
    env:
      # --- UPDATED ENVIRONMENT VARIABLES ---
      DOCKER_REPO: 'manojk-oci-local' # Changed from codeninjas-proj-docker-local
      IMAGE_NAME: 'my-very-cool-image:${{ github.run_number }}'
      JF_URL: https://hts2.jfrog.io
      DOCKER_CLI_EXPERIMENTAL: enabled
    steps:
      # 1. Setup JFrog CLI and authenticate via OIDC
      - name: Setup JFrog CLI and OIDC
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{ env.JF_URL }}
          JF_PROJECT: ${{ vars.JF_PROJECT }}
        with:
          oidc-provider-name: manojk-oci # Corrected indentation for 'with' block properties

      # 2. Verify OIDC Outputs (Optional debug step)
      - name: Verify OIDC Outputs
        run: |
          echo "OIDC User: ${{ steps.setup-cli.outputs.oidc-user }}"
          echo "OIDC Token available: ${{ steps.setup-cli.outputs.oidc-token != '' }}"
      
      # 3. Checkout the repository code
      - name: Checkout the repository
        uses: actions/checkout@v4
      
      # --- DOCKER BUILD & PUSH STEPS ---

      # 4. Set up QEMU (for multi-platform builds, kept for robustness)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 5. Authenticate Docker with OIDC Token
      - name: Authenticate Docker to JFrog Registry
        uses: docker/login-action@v3
        with:
          # FIX: Use only the base JFrog URL for the registry login check.
          registry: ${{ env.JF_URL }} 
          username: ${{ steps.setup-cli.outputs.oidc-user }}
          password: ${{ steps.setup-cli.outputs.oidc-token }}
      
      # 6. Setup Buildx Instance
      - name: Setup Buildx instance
        uses: docker/setup-buildx-action@v3
        with:
          use: true
          platforms: linux/amd64,linux/arm64
          install: true
      
      # 7. Docker Build, Push, and Capture Build-Info
      # NOTE: We use jf docker build to capture build-info and push in one go
      - name: Docker Build, Push, and Capture Build-Info
        run: |
          FULL_IMAGE_NAME="${{ env.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}"
          
          # Jf docker build automatically tags, pushes, and creates metadata.json
          jf docker build --tag $FULL_IMAGE_NAME \
            --platform linux/amd64,linux/arm64 \
            --metadata-file metadata.json \
            --push .

      # --- JFROG XRAY SCAN & BUILD PUBLISH ---
      
      # 8. Add Docker Package to Build-Info
      - name: Add Docker Package to Build
        run: |
          # The image name used in the jf docker build command is used here for traceability
          IMAGE_NAME_WITH_DIGEST=$(cat metadata.json | jq -r '."containerimage.digest"' | xargs -I {} echo "${{ env.JF_URL }}/${{ env.DOCKER_REPO }}/${{ env.IMAGE_NAME }}@{}")
          
          echo "Adding Docker image to Build Info: $IMAGE_NAME_WITH_DIGEST"
          jf rt build-docker-create ${{ env.DOCKER_REPO }} --image-file metadata.json \
              --module=docker-module
      
      # 9. Publish Build Info
      - name: Publish Build Info
        run: |
          jf rt build-collect-env
          jf rt build-add-git
          # Use environment variables for the build name/number
          jf rt build-publish ${{ github.repository }}/${{ github.run_id }} ${{ github.run_number }}
      
      # 10. Xray Build Scan
      - name: Xray Build Scan
        run: |
          jf build-scan ${{ github.repository }}/${{ github.run_id }}/${{ github.run_number }}

      # 11. Write to workflow job summary (Kept your custom notes)
      - name: Write to workflow job summary
        run: |
          NOTE=$'>[!NOTE]\n>Frog Notes \n'
          TIP=$'>[!TIP]\n>Hello JFrog\n'
          IMPORTANT=$'>[!IMPORTANT]\n>Hello IMPORTANT NOTE\n'
          WARNING=$'>[!WARNING]\n>Hello WARNING NOTE\n'
          CAUTION=$'>[!CAUTION]\n>Hello CAUTION NOTE\n'
          echo "$NOTE" >> $GITHUB_STEP_SUMMARY
          echo "$TIP" >> $GITHUB_STEP_SUMMARY
          echo "$IMPORTANT" >> $GITHUB_STEP_SUMMARY
          echo "$WARNING" >> $GITHUB_STEP_SUMMARY
          echo "$CAUTION" >> $GITHUB_STEP_SUMMARY
